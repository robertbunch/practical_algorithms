import time
start_time = time.time() #get our starting time
import math
# Answer: 76576500
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 
#1+2+3+4+5+6+7 = 28. The first ten terms would be: 1,3,6,10,15,21,28,36,45,55,...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1, 3
#  6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4,  7, 14, 28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
########my solution 1###########
def get_factors(triangle_number_value):
    # we know that 1 and the number itself are factors. Init 
    list_of_factors = [1,triangle_number_value] 
    number_to_check_to = math.ceil(math.sqrt(triangle_number_value))
    # checked_numbers includes 0 and 1 which we will never check
    # checked_numbers = [False] * (math.ceil(math.sqrt(triangle_number_value)))
    # print(f"Checked Numbers: {checked_numbers}")
    # checked_numbers = [False] * math.ceil((triangle_number_value))
    #loop through known primes
    # counter = 0
    # i = known_primes[counter] #[0] = 2, [1] = 3
    # print(list_of_factors)
    for i in range(2,number_to_check_to):
        # print(i,triangle_number_value)
    # while(i < len(checked_numbers)):
    # for i in known_primes:
        #is this number divisible by this prime number?
        if(triangle_number_value % i == 0):
            #it is. prime factor. add it to the list_of_factors
            list_of_factors.append(i)
            list_of_factors.append(int(triangle_number_value / i))
            # checked_numbers[i] = True
    return list_of_factors



triangle_sequence_number = 0 #first number in the sequence
triangle_number_value = 0 #value of current triange (sequence) number 
factor_list = []
while(len(factor_list) < 500):
    # inc triangle_sequence_number
    triangle_sequence_number += 1
    #to get the next value, use the old number + the new sequence number
    triangle_number_value = triangle_number_value + triangle_sequence_number
    factor_list = get_factors(triangle_number_value)
print(f"sequence: {triangle_sequence_number}, value: {triangle_number_value}")
end_time = time.time() #get our ending time
print(f"--- Number of seconds to solve {time.time() - start_time}")

